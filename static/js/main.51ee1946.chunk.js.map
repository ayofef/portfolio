{"version":3,"sources":["components/title/title.js","components/terminal/text.js","components/terminal/terminal.js","components/App.js","serviceWorker.js","index.js"],"names":["Title","className","style","color","href","Text","startDelay","speed","hideCursor","onFinishedTyping","document","getElementById","display","id","Terminal","params","useSpring","opacity","from","transform","div","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iRAyBeA,MAtBf,WACI,OACA,6BACI,yBAAKC,UAAU,UACX,yBAAKA,UAAU,WACf,gDAGJ,yBAAKA,UAAU,SACX,uBAAGC,MAAO,CAAEC,MAAO,YAAnB,oBAEI,6BAFJ,+EAGgF,uBAAGF,UAAU,OAAOG,KAAK,2BAAzB,aAC5E,6BAJJ,4BAK6B,uBAAGH,UAAU,OAAOG,KAAK,6BAAzB,SAL7B,iBAKyG,uBAAGH,UAAU,OAAOG,KAAK,4DAAzB,YALzG,Q,6CCyBGC,MAjCf,WAKI,OACE,yBAAKJ,UAAU,QACf,kBAAC,IAAD,CAAQK,WAAY,IAAMC,MAAO,GAAIC,WAAW,OAAOC,iBANxC,WACTC,SAASC,eAAe,UAC5BT,MAAMU,QAAU,UAIlB,qBAGA,yBAAKC,GAAG,SAASX,MAAO,CAAEU,QAAS,SAEjC,2BACA,0BAAMX,UAAU,YAAhB,uBADA,kBAEE,6BACA,0BAAMA,UAAU,YAAhB,gBAHF,iDAIE,6BACA,0BAAMA,UAAU,YAAhB,SALF,KAK2C,uBAAGG,KAAK,IAAR,uBAL3C,IAME,6BACA,0BAAMH,UAAU,YAAhB,gBAPF,iCAQE,6BACA,0BAAMA,UAAU,YAAhB,aATF,sEAUE,6BACA,0BAAMA,UAAU,YAAhB,eAXF,KAWiD,uBAAGG,KAAK,6BAAR,SAXjD,OAWkG,uBAAGA,KAAK,4DAAR,YAXlG,OAWqL,uBAAGA,KAAK,6BAAR,UAXrL,KAYE,6BACA,0BAAMH,UAAU,UAAhB,YCDKa,MAvBf,WACE,IAAMC,EAASC,YAAU,aACvBC,QAAS,EAAGC,KAAM,CAACD,QAAS,GAC5BE,UAAW,sBAFW,OAEiB,CAAEA,UAAW,2BAGtD,OAAO,kBAAC,IAASC,IAAV,CAAclB,MAAOa,GAC1B,6BACE,yBAAKd,UAAU,iBACb,yBAAKA,UAAU,QACf,yBAAKA,UAAU,QACf,yBAAKA,UAAU,WAEjB,yBAAKA,UAAU,QACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,W,MCHKoB,MAXf,WACE,OACE,6BACA,yBAAKpB,UAAU,aACX,kBAAC,EAAD,MACA,kBAAC,EAAD,SCCYqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASlB,SAASC,eAAe,SD8H3C,kBAAmBkB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.51ee1946.chunk.js","sourcesContent":["import React from 'react';\nimport './title.scss'\n\nfunction Title() {\n    return( \n    <div>\n        <div className=\"banner\">\n            <div className=\"avatar\" />\n            <h1>Filip Ã…hfelt</h1>\n        </div>\n        \n        <div className=\"intro\">\n            <p style={{ color: '#434c5e' }}>\n                Hello, I'm Filip.\n                <br />\n                I'm a M.Sc. Student at Faculty of Engineering LTH. Currently, IT Consult at <a className=\"link\" href=\"http://www.lunicore.se/\">Lunicore.</a>\n                <br />\n                To keep in touch, simply <a className=\"link\" href=\"mailto:filahf94@gmail.com\">email</a> or add me on <a className=\"link\" href=\"https://www.linkedin.com/in/filip-%C3%A5hfelt-22977119a/\">LinkedIn</a>.\n            </p>\n        </div>\n    </div>\n    )\n\n}\n\nexport default Title;","import Typing from 'react-typing-animation';\nimport './text.scss'\nimport React from 'react';\n//http://ws.audioscrobbler.com/2.0/?method=user.gettopartists&user=murmuroffbeat&api_key=1650d775b3cb99abfe8d0a918bbd76c7&format=json\nfunction Text() {\n  const myFunction = () => {\n    var x = document.getElementById(\"result\");\n      x.style.display = \"block\";\n  }\n    return (\n      <div className=\"text\">\n      <Typing startDelay={1000} speed={80} hideCursor=\"true\" onFinishedTyping={myFunction} >\n      ./filip-ahfelt.sh\n    </Typing>\n      <div id=\"result\" style={{ display: 'none' }}>\n        \n        <p>\n        <span className=\"projects\">> Current location:</span> \"Lund, Sweden\"\n          <br/>\n          <span className=\"projects\">> Education:</span> \"M.Sc. Student at Faculty of Engineering LTH\"\n          <br/>\n          <span className=\"projects\">> CV:</span> \"<a href=\"\">filip_ahfelt_CV.pdf</a>\"\n          <br/>\n          <span className=\"projects\">> Interests:</span> [\"Music\", \"Design\", \"Nature\"]\n          <br />\n          <span className=\"projects\">> Skills:</span> [\"JavaScript\", \"Python\", \"CSS\", \"React\", \"SQL\", \"GraphQL\", \"Node\"]\n          <br />\n          <span className=\"projects\">> Contact: </span>[\"<a href=\"mailto:filahf94@gmail.com\">Email</a>\", \"<a href=\"https://www.linkedin.com/in/filip-%C3%A5hfelt-22977119a/\">LinkedIn</a>\", \"<a href=\"https://github.com/filahf\">Github</a>\"]\n          <br/>\n          <span className=\"cursor\">&nbsp;</span>\n        </p>\n\n      </div>\n    </div>\n    )\n}\n\nexport default Text;\n","import React from 'react';\nimport './terminal.scss'\nimport {useSpring, animated} from 'react-spring'\nimport Text from './text';\n\nfunction Terminal() {\n  const params = useSpring({\n    opacity: 1, from: {opacity: 0},\n    transform: 'translate3d(0,0,0)', from: { transform: 'translate3d(0,40px,0)' }\n\n  })\n  return <animated.div style={params}>\n    <div>\n      <div className=\"terminal-head\">\n        <div className=\"min\"></div>\n        <div className=\"max\"></div>\n        <div className=\"close\"></div>\n      </div>\n      <div className=\"card\">\n        <div className=\"text\">\n          <Text />\n        </div>\n      </div>\n    </div>\n  </animated.div>\n\n}\n\nexport default Terminal;","import React from 'react';\nimport Title from './title/title'\nimport Terminal from './terminal/terminal'\nimport './App.scss'\n\n\nfunction App() {\n  return (\n    <div>\n    <div className=\"container\">\n        <Title />\n        <Terminal />\n    </div>\n</div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}